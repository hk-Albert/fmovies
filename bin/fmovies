#!/usr/bin/env python

import subprocess
import sys
import six
import argparse
from datetime import datetime

import requests
from bs4 import BeautifulSoup

DEBUG = False


def decoding_strings(f):
    def wrapper(*args, **kwargs):
        out = f(*args, **kwargs)
        if isinstance(out, six.string_types) and not six.PY3:
            # todo: make encoding configurable?
            if six.PY3:
                return out
            else:
                return out.decode(sys.stdin.encoding)
        return out

    return wrapper


def _input_compat(prompt):
    if six.PY3:
        r = input(prompt)
    else:
        r = raw_input(prompt)
    return r


if six.PY3:
    str_compat = str
else:
    str_compat = unicode

dateObject = 'YYYY-MM-DD'


@decoding_strings
def ask(question, answer=str_compat, default=None, l=None, options=None):
    if answer == str_compat:
        r = ''
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question, default))

            r = r.strip()

            if len(r) <= 0:
                if default:
                    r = default
                    break
                else:
                    print('You must enter something')
            else:
                if l and len(r) != l:
                    print('You must enter a {0} letters long string'.format(l))
                else:
                    break

        return r

    elif answer == bool:
        r = None
        while True:
            if default is True:
                r = _input_compat('> {0} (Y/n) '.format(question))
            elif default is False:
                r = _input_compat('> {0} (y/N) '.format(question))
            else:
                r = _input_compat('> {0} (y/n) '.format(question))

            r = r.strip().lower()

            if r in ('y', 'yes'):
                r = True
                break
            elif r in ('n', 'no'):
                r = False
                break
            elif not r:
                r = default
                break
            else:
                print("You must answer 'yes' or 'no'")
        return r
    elif answer == int:
        r = None
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question))

            r = r.strip()

            if not r:
                r = default
                break

            try:
                r = int(r)
                break
            except:
                print('You must enter an integer')
        return r
    elif answer == list:
        # For checking multiple options
        r = None
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question))

            r = r.strip()

            if not r:
                r = default
                break

            try:
                if int(r) in range(1, len(options) + 1):
                    break
                else:
                    print('Please select valid option: ' + ' or '.join('{}'.format(s) for _, s in enumerate(options)))
            except:
                print('Please select valid option: ' + ' or '.join('{}'.format(s) for _, s in enumerate(options)))
        return r
    if answer == dateObject:
        r = ''
        while True:
            if default:
                r = _input_compat('> {0} [{1}] '.format(question, default))
            else:
                r = _input_compat('> {0} '.format(question, default))

            r = r.strip()

            if not r:
                r = default
                break

            try:
                datetime.datetime.strptime(r, '%Y-%m-%d')
                break
            except ValueError:
                print("Incorrect data format, should be YYYY-MM-DD")

        return r

    else:
        raise NotImplemented(
            'Argument `answer` must be str_compat, bool, or integer')


def test_system():
    """Runs few tests to check if npm and peerflix is installed on the system."""
    if subprocess.check_call('python --version', shell=True) != 0:
        print('Python not installed installed, please read the Readme file for more information.')
        exit()
    if subprocess.check_call('youtube-dl --version', shell=True) != 0:
        print('Youtube-dl not installed, installing..')
        try:
            subprocess.check_call('pip install youtube-dl', shell=True)
        except subprocess.CalledProcessError as err:
            print('Installing as root user...')
            subprocess.check_call('sudo pip install youtube-dl', shell=True)


def download_episodes(movie_name, url, counter):
    print('Downloading episode: {0} {1}'.format(movie_name, counter))
    command = 'youtube-dl ' + url + ' -o "' + movie_name + ' Episode ' + str(counter) + '"'
    subprocess.check_call(command, shell=True)


def get_episodes(movie_name, url, domain):
    resp = requests.get(url)
    soup = BeautifulSoup(resp.text, 'html.parser')
    data_ts_elem = soup.find("html")
    data_ts = data_ts_elem.get("data-ts")
    server_list = soup.find_all(attrs={'class': 'server row', 'data-type': 'direct'})
    episode_list = []
    for index, each_episode in enumerate(server_list):
        server_id = each_episode.get('data-id')
        episodes = each_episode.find_all('a')
        count = len(episodes)
        episode_list.append({'episode_list': episodes, 'count': count, 'index': index, 'server_id': server_id})
    max_episodes = max([a['count'] for a in episode_list])
    print("Found {0} episodes.".format(max_episodes))
    max_episode_list = []
    for a in episode_list:
        server_id = a['server_id']
        if a['count'] == max_episodes:
            for b in a['episode_list']:
                max_episode_list.append(b.get('href').split('/')[-1])
            break
    video_finder = domain + "/grabber-api/"
    params = {
        'token': 'IFmEgNFcXOoGvJbTmZ6BOB6E0M54yvgN5keGw7RT0xtCj54csQiXe/tAlv/P57uZznG2N3K5npqR4Rh@8AUNCxD7IQG7avYOQVlCqJgkFtfZDlbHne98WpBZk9iEy00YBoiN/xxSO00Ggw==',
        'server': str(server_id),
        'options': 'LhyCgccIA7AF@9rJhcmTKFDS2t4zyugor1OVyKgG/U4QltZJgwjbWMoK',
        'mobile': '0',
        'ts': str(data_ts),
        'id': '',
        '_': '1234'
    }
    for index, episode in enumerate(max_episode_list):
        params['id'] = str(episode)
        print(params)
        video_url = requests.get(video_finder, params=params).json()
        if video_url['error']:
            print(video_url['error'])
            sys.exit(0)
        download_episodes(movie_name, video_url['data'][-1]['file'], index+1)


def get_description(description_soup):
    title_bs = description_soup.find_all(attrs={'class': 'title'})
    title = " ".join(title_bs[0].strings)
    return title


def fetch_movie_names(movie_soup, domain):
    movie_links = {}
    counter = 1
    movie_page = movie_soup.find_all(attrs={'class': 'row movie-list'})

    all_links = movie_page[0].find_all("a", attrs={'class': 'name'})
    all_desc = movie_page[0].find_all(attrs={'class': 'item'})
    title = None
    for index, each_link in enumerate(all_links):
        each_desc = all_desc[index].get('data-tip')
        desc_url = domain + "/" + each_desc
        desc_response = requests.get(desc_url)
        soup = BeautifulSoup(desc_response.text, 'html.parser')
        title = get_description(soup)
        movie_links[counter] = {'title': title}
        movie_links[counter]['href'] = domain + each_link.get('href')
        if title:
            counter += 1
        if counter > 10:
            break
    return movie_links


def get_magnet_link(movie_name, domain):
    URL = domain + '/search?keyword='+movie_name.replace(' ', '+')

    resp = requests.get(URL)
    soup = BeautifulSoup(resp.text, 'html.parser')
    movie_list = fetch_movie_names(soup, domain)
    print("Below are the Movies:")
    for index, movie in movie_list.items():
        print('%s: %s' % (index, movie['title']))
    selected_index = ask('Select one number from the above list',
                         answer=list, default='1', options=range(1, 21))
    return movie_list[int(selected_index)]['href']


def main(args):
    test_system()
    movie = args.movie
    if not movie:
        movie = 'THE PUNISHER'
    domain = args.domain
    if not domain:
        domain = "https://bmovies.to"
    print('Fetching Movies/T.V. series. Hang on..')
    movie_url = get_magnet_link(movie, domain)
    print('Fetching sources')
    get_episodes(movie, movie_url, domain)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Download movies from fmovies/bmovies')
    parser.add_argument('-m', '--movie', help='movie or tv series to download')
    parser.add_argument('-d', '--domain', help='domain to download from')
    args = parser.parse_args()
    main(args)
